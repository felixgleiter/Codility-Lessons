function minAbsSum(A) {
     function getSum(total, num) {
        return total + num;
    }
    function convertDecimalToSignBinary(N) {
        binDigitArray = [];
        while (N > 0) {
            if (N % 2 == 0) {
                binDigitArray.unshift(-1);
                N /= 2;
            } else if (N % 2 == 1) {
                binDigitArray.unshift(1);
                N = (N - 1)/2;
            }
        }
        return binDigitArray;
    }
    var val = Math.abs(A.reduce(getSum, 0));
    for (var i = (2**(A.length) - 2); i > (2**(A.length - 1)) - 1; i--) {
        var S = convertDecimalToSignBinary(i);
        var total = 0;
        for (var j = 0; j < A.length; j++) {
            total += A[j]*S[j];
        }
        if (Math.abs(total) < val) {
            val = Math.abs(total);
        }
    }
    return val;
}

//Second Version, Much Improved

function minAbsSum(A) {
    function getSum(total, num) {
        return total + num;
    }
    A = A.map(Math.abs).sort(function(a,b){return b-a});
    var val = A.reduce(getSum,0);
    for (var j = 1; j < Math.ceil(A.length/2) + 1; j++) {
        var total = A.slice(0,j).reduce(getSum,0);
        for (var k = j; k < A.length; k++) {
            total < 0 ? total += A[k] : total -= A[k];
        }
        if (Math.abs(total) < val) {
            val = Math.abs(total);
        }
    }
    return val;
}

//Third version; in Java! (81%)
class Solution {
    public int solution(int[] A) {
       ArrayList<Integer> L = new ArrayList<Integer>();
       for (int i = 0; i < A.length; i++) {
           L.add((Integer) Math.abs(A[i]));
       }
       Collections.sort(L);
       int total = L.stream().reduce(0, (a,b) -> a + b);
       int val = total;
       for (int i = 0; i < Math.ceil(total/2); i++) {
           int rightTotal = 0;
           for (int j = L.size() - 1; j >= 0; j--) {
               if (rightTotal + L.get(j) <= Math.ceil(total/2) + i) {
                   rightTotal += L.get(j);
               }
           }
           if (rightTotal == Math.ceil(total/2) + i || rightTotal == Math.floor(total/2) - i) {
               if (total % 2 == 0) {
                   val = 2 * i;
               } else {
                   val = (2 * i) + 1;
               }
               break;
           }
       }
       return val;
    }
}
